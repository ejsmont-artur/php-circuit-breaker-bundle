<?xml version="1.0" encoding="UTF-8"?>
<project name="php-circuit-breaker-bundle" default="ci" basedir=".">

    <!-- ===================================== CUSTOM PROPERTIES =================================================== -->

    <property name="product" value="php-circuit-breaker-bundle"/>
    <property name="version" value="0.1.5"/>

    <!-- ==================================== GENERIC PROPERTIES =================================================== -->
    
    <tstamp>
        <format property="build.time" pattern="yyyyMMdd-HHmmss" />
    </tstamp>
    <tstamp>
        <format property="build.time.serial" pattern="yyyyMMddHHmmss" />
    </tstamp>
    <tstamp>
        <format property="build.time.full" pattern="yyyy-MM-dd HH:mm:ss" />
    </tstamp>
    <property name="build.name" value="${product}-${version}-${build.time}" />
    
    <!-- ======================================== PREPARATIONS ===================================================== -->

    <target name="clean">
        <delete dir="${basedir}/build" />
    </target>

    <target name="init">
        <mkdir dir="${basedir}/build" />
        <mkdir dir="${basedir}/build/logs" />
        <mkdir dir="${basedir}/build/cache" />
        <mkdir dir="${basedir}/build/doc" />
        <mkdir dir="${basedir}/build/coverage" />
        <mkdir dir="${basedir}/build/dist" />
    </target>
    
    <target name="quick" depends="clean,init"/>

    <!-- ========================================== COMPOSER ====================================================== -->

    <target name="check-composer">
        <available property="composer.phar.exists" file="composer.phar"/>
    </target>

    <target name="fetch-composer" depends="check-composer" unless="composer.phar.exists">
        <echo >Fetching composer.phar</echo>   
        <exec executable="/bin/bash" failonerror="on">
            <arg value="-c" />
            <arg value="curl -s https://getcomposer.org/installer | php" />
        </exec>
    </target>

    <target name="setup" depends="check-composer,fetch-composer">
        <echo >Updating composer dependencies</echo>
        <exec executable="php" dir="${basedir}" failonerror="on">
            <arg line="composer.phar update" />
        </exec>
    </target>

    <!-- ============================================= FULL ======================================================== -->

    <target name="phpunit" depends="quick">
        <exec executable="phpunit" dir="${basedir}/Tests" failonerror="on">
        </exec>
        <delete>            
            <fileset dir="/tmp" includes="unit-test*"/>        
        </delete>
    </target>
    
    <target name="phpunitExtended" depends="quick">
        <exec executable="phpunit" dir="${basedir}/Tests" failonerror="on">
            <arg line="--configuration phpunit-extended.xml" />
        </exec>
        <delete>            
            <fileset dir="/tmp" includes="unit-test*"/>        
        </delete>
    </target>

    <target name="phpdoc" depends="quick">
        <exec executable="phpdoc" dir="${basedir}" failonerror="off">
            <arg line="-d . --ignore vendor/,build/,Tests/ -t build/doc" />
        </exec>
    </target>
    
    <!-- Depending on how we want to distribute/deploy code, we might want to build some type of release here -->
    <!-- For now i think a tgz archive is a good start but we could consider some better way of packaging -->
    <target name="package" depends="init">
        <tar destfile="${basedir}/build/dist/${build.name}.tar.gz" compression="gzip" longfile="gnu">
            <tarfileset dir="${basedir}">
                <include name="*/**" />
                
                <exclude name="**/.git/**"/>
                <exclude name=".gitignore" />
                <exclude name="Tests/"/>
                <exclude name="build/" />
                <exclude name="build.xml" />
            </tarfileset>
        </tar>
    </target>
    
    <!-- print coverage -->
    <target name="print-code-coverage">
        <exec executable="bash" dir="${basedir}" failonerror="off" >
            <arg value="-c" />
            <arg value="cat build/logs/clover.xml | awk '/files/ {lines = $10; covered = $11; gsub(/[^0-9]*/, &quot;&quot;, lines);  gsub(/[^0-9]*/, &quot;&quot;, covered); coverage = (covered * 100) / lines; printf &quot;Total code coverage: %.2f %%&quot;, coverage}'" />
        </exec>
    </target>

    <!-- ======================================== GIT RELATED ====================================================== -->

    <target name="git-check-status">
        <exec executable="/bin/bash" failonerror="on" outputproperty="git-status-not-empty">
            <arg value="-c" />
            <arg value="git status -s" />
        </exec>
    </target>

    <target name="git-fetch-tags">
        <exec executable="/bin/bash" failonerror="on">
            <arg value="-c" />
            <arg value="git fetch --tags" />
        </exec>
    </target>
    
    <target name="git-create-tag" depends="git-check-status">
        <fail message="Can not tag a dirty folder. Commit or revert first.">
            <condition>
                <not>
                    <equals arg1="${git-status-not-empty}" arg2=""/>
                </not>
            </condition>
        </fail>
        <exec executable="/bin/bash" failonerror="on">
            <arg value="-c" />
            <arg value="git tag -m 'taggin ${version}' ${version}" />
        </exec>
    </target>

    <target name="git-push-tags">
        <exec executable="/bin/bash" failonerror="on">
            <arg value="-c" />
            <arg value="git push --tags" />
        </exec>
    </target>

    <target name="git-tag"   depends="git-fetch-tags,git-create-tag,git-push-tags"/>

    <!-- ===================================== COMPOUND SHORTCUTS ================================================== -->
    
    <target name="ci"   depends="phpunitExtended,phpdoc,print-code-coverage"/>

    <!-- reload dependencies and run full CI build -->
    <target name="full" depends="setup,phpunitExtended,phpdoc,package,print-code-coverage"/>
    
</project>
